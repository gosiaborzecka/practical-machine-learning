correlation <- rxCor(formula = formula,
data = train_df,
transforms = list(label1 = as.numeric(label1)))
correlation <- correlation[, "label1"]
correlation <- abs(correlation)
correlation <- correlation[order(correlation, decreasing = TRUE)]
correlation <- correlation[-1]
correlation <- correlation[1:top_variables]
formula <- as.formula(paste(paste("label1~"),
paste(names(correlation), collapse = "+")))
formula
?MicrosoftML::rxEnsemble
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
combineMethod = "average")
summary(ensemble_model)
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
InformationValue::AUROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
maxCalibration = 10,
combineMethod = "vote")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
combineMethod = "vote")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
InformationValue::AUROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
combineMethod = "median")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
InformationValue::AUROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
maxCalibration = 20,
combineMethod = "average")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
InformationValue::AUROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
maxCalibration = 100,
combineMethod = "average")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
combineMethod = "average")
summary(ensemble_model)
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model_prediction
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
modelCount = 8,
combineMethod = "average")
summary(ensemble_model)
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
modelCount = 10,
combineMethod = "average")
summary(ensemble_model)
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
InformationValue::AUROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
modelCount = 10,
combineMethod = "vote")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
modelCount = 12,
combineMethod = "average")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
modelCount = 12,
maxCalibration = 2000,
combineMethod = "average")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
modelCount = 8,
maxCalibration = 1000,
combineMethod = "average")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
ensemble_model <- rxEnsemble(
formula = formula,
data = train_df,
type = "binary",
trainers = list(
logisticRegression(),
logisticRegression(l1Weight = 0.9,
l2Weight = 0.9,
normalize = "warn"),
fastTrees(numTrees = 20,
exampleFraction = 0.6,
featureFraction = 0.9,
learningRate = 0.01,
unbalancedSets = FALSE,
numLeaves = 10,
minSplit = 5,
splitFraction = 0.8),
fastForest(numTrees = 10,
numLeaves = 15,
exampleFraction = 0.6,
featureFraction = 0.7,
splitFraction = 0.6,
minSplit = 15)),
replace = TRUE,
modelCount = 8,
combineMethod = "average")
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
InformationValue::AUROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
summary(ensemble_model)
ensemble_model_prediction <- rxPredict(modelObject = ensemble_model,
data = test_df,
extraVarsToWrite = "label1")
ensemble_model_metrics <- evaluate_classifier(actual = "label1", predicted = "PredictedLabel",
data = ensemble_model_prediction)
ensemble_model_metrics$Metrics[1]
ensemble_model_metrics$Metrics[5]
ensemble_model_metrics$Metrics[c(1,5)]
rxAuc(roc(data = ensemble_model_prediction,
observed = "label1",
predicted = "Probability.1"))
InformationValue::plotROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
InformationValue::AUROC(ensemble_model_prediction$label1, ensemble_model_prediction$Probability.1)
